import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import type { JournalEntry } from '../services/journalService';

/**
 * Enhanced Export Service for Patient Journal
 * Supports PDF, CSV, JSON, and Monthly Reports
 */

// ============================================================================
// PDF EXPORTS
// ============================================================================

/**
 * Generate comprehensive PDF for a single journal entry
 */
export const generateDetailedEntryPDF = (entry: JournalEntry, patientName?: string) => {
  const doc = new jsPDF();
  let yPos = 20;

  // Header with logo/branding
  doc.setFillColor(76, 175, 80);
  doc.rect(0, 0, 210, 30, 'F');
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(24);
  doc.setFont('helvetica', 'bold');
  doc.text('Patient Journal Entry', 14, 18);
  
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  doc.text('InPEP Health Hub - Confidential Medical Record', 14, 25);

  // Reset text color
  doc.setTextColor(0, 0, 0);
  yPos = 40;

  // Patient & Entry Info
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.text('Entry Information', 14, yPos);
  yPos += 10;

  doc.setFont('helvetica', 'normal');
  doc.setFontSize(10);
  if (patientName) {
    doc.text(`Patient: ${patientName}`, 14, yPos);
    yPos += 6;
  }
  doc.text(`Date: ${new Date(entry.entryDate).toLocaleString()}`, 14, yPos);
  yPos += 6;
  doc.text(`Entry ID: ${entry.id}`, 14, yPos);
  yPos += 10;

  // Entry Details Table
  autoTable(doc, {
    startY: yPos,
    head: [['Field', 'Details']],
    body: [
      ['Title', entry.title],
      ['Event Type', entry.eventType],
      ['Mood', entry.mood || 'Not recorded'],
      ['Tags', entry.tags || 'None'],
      ['Shared with Provider', entry.sharedWithProvider ? 'Yes' : 'No'],
      ['Reviewed by Provider', entry.providerReviewedAt ? `Yes (${new Date(entry.providerReviewedAt).toLocaleDateString()})` : 'No'],
    ],
    theme: 'grid',
    headStyles: { fillColor: [76, 175, 80] },
  });

  yPos = (doc as any).lastAutoTable.finalY + 10;

  // Content Section
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.text('Detailed Notes:', 14, yPos);
  yPos += 8;

  doc.setFont('helvetica', 'normal');
  doc.setFontSize(10);
  const splitContent = doc.splitTextToSize(entry.content, 180);
  doc.text(splitContent, 14, yPos);
  yPos += (splitContent.length * 5) + 10;

  // Structured Details (if available)
  if (entry.structuredDetails) {
    try {
      const details = JSON.parse(entry.structuredDetails);
      doc.setFontSize(12);
      doc.setFont('helvetica', 'bold');
      doc.text('Clinical Details:', 14, yPos);
      yPos += 8;

      doc.setFont('helvetica', 'normal');
      doc.setFontSize(10);
      Object.entries(details).forEach(([key, value]) => {
        const formattedKey = key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase());
        doc.text(`${formattedKey}: ${value}`, 14, yPos);
        yPos += 6;
      });
      yPos += 5;
    } catch (e) {
      // Invalid JSON, skip
    }
  }

  // Provider Notes (if available)
  if (entry.providerNotes) {
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('Provider Clinical Notes:', 14, yPos);
    yPos += 8;

    doc.setFont('helvetica', 'normal');
    doc.setFontSize(10);
    const splitNotes = doc.splitTextToSize(entry.providerNotes, 180);
    doc.text(splitNotes, 14, yPos);
  }

  // Footer on all pages
  const pageCount = (doc as any).internal.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(128, 128, 128);
    doc.text(`Page ${i} of ${pageCount}`, 14, 287);
    doc.text('Generated by InPEP Health Hub', 105, 287, { align: 'center' });
    doc.text(new Date().toLocaleDateString(), 196, 287, { align: 'right' });
    doc.text('CONFIDENTIAL MEDICAL RECORD', 105, 292, { align: 'center' });
  }

  // Save
  const filename = `Journal_${entry.title.replace(/[^a-z0-9]/gi, '_')}_${new Date().toISOString().split('T')[0]}.pdf`;
  doc.save(filename);
};

/**
 * Generate monthly summary report PDF
 */
export const generateMonthlySummaryPDF = (
  entries: JournalEntry[],
  month: string,
  year: string,
  patientName?: string
) => {
  const doc = new jsPDF();

  // Header
  doc.setFillColor(76, 175, 80);
  doc.rect(0, 0, 210, 35, 'F');
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(22);
  doc.setFont('helvetica', 'bold');
  doc.text('Monthly Health Summary', 14, 18);
  
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  doc.text(`${month} ${year}`, 14, 26);
  if (patientName) {
    doc.text(`Patient: ${patientName}`, 14, 32);
  }

  doc.setTextColor(0, 0, 0);
  let yPos = 45;

  // Summary Statistics
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Summary Statistics', 14, yPos);
  yPos += 10;

  const stats = calculateStats(entries);
  
  autoTable(doc, {
    startY: yPos,
    head: [['Metric', 'Count']],
    body: [
      ['Total Entries', stats.totalEntries],
      ['Critical Events', stats.criticalEvents],
      ['Seizures', stats.seizures],
      ['Falls', stats.falls],
      ['Behavioral Changes', stats.behavioralChanges],
      ['Entries Shared with Provider', stats.sharedEntries],
      ['Entries Reviewed', stats.reviewedEntries],
    ],
    theme: 'grid',
    headStyles: { fillColor: [76, 175, 80] },
  });

  yPos = (doc as any).lastAutoTable.finalY + 15;

  // Mood Analysis
  if (stats.moodCounts.length > 0) {
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Mood Analysis', 14, yPos);
    yPos += 10;

    autoTable(doc, {
      startY: yPos,
      head: [['Mood', 'Frequency']],
      body: stats.moodCounts,
      theme: 'grid',
      headStyles: { fillColor: [76, 175, 80] },
    });

    yPos = (doc as any).lastAutoTable.finalY + 15;
  }

  // Entry List
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('All Entries', 14, yPos);
  yPos += 10;

  const entryRows = entries.map(entry => [
    new Date(entry.entryDate).toLocaleDateString(),
    entry.title,
    entry.eventType,
    entry.mood || 'N/A',
  ]);

  autoTable(doc, {
    startY: yPos,
    head: [['Date', 'Title', 'Event Type', 'Mood']],
    body: entryRows,
    theme: 'grid',
    headStyles: { fillColor: [76, 175, 80] },
    styles: { fontSize: 8 },
  });

  // Footer
  const pageCount = (doc as any).internal.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(128, 128, 128);
    doc.text(`Page ${i} of ${pageCount}`, 14, 287);
    doc.text('Generated by InPEP Health Hub', 105, 287, { align: 'center' });
    doc.text(new Date().toLocaleDateString(), 196, 287, { align: 'right' });
  }

  // Save
  const filename = `Monthly_Summary_${month}_${year}.pdf`;
  doc.save(filename);
};

// ============================================================================
// CSV EXPORTS
// ============================================================================

/**
 * Export journal entries to CSV
 */
export const exportToCSV = (entries: JournalEntry[], filename?: string) => {
  // CSV Headers
  const headers = [
    'Entry ID',
    'Date',
    'Title',
    'Event Type',
    'Mood',
    'Content',
    'Tags',
    'Shared with Provider',
    'Provider Reviewed',
    'Review Date',
  ];

  // CSV Rows
  const rows = entries.map(entry => [
    entry.id,
    new Date(entry.entryDate).toISOString(),
    entry.title,
    entry.eventType,
    entry.mood || '',
    entry.content.replace(/"/g, '""'), // Escape quotes
    entry.tags || '',
    entry.sharedWithProvider ? 'Yes' : 'No',
    entry.providerReviewedAt ? 'Yes' : 'No',
    entry.providerReviewedAt ? new Date(entry.providerReviewedAt).toISOString() : '',
  ]);

  // Combine headers and rows
  const csvContent = [
    headers.join(','),
    ...rows.map(row => row.map(cell => `"${cell}"`).join(',')),
  ].join('\n');

  // Download
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  link.setAttribute('href', url);
  link.setAttribute('download', filename || `Journal_Export_${new Date().toISOString().split('T')[0]}.csv`);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};

// ============================================================================
// JSON EXPORTS
// ============================================================================

/**
 * Export journal entries to JSON
 */
export const exportToJSON = (entries: JournalEntry[], filename?: string) => {
  const jsonContent = JSON.stringify(entries, null, 2);
  
  const blob = new Blob([jsonContent], { type: 'application/json' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  link.setAttribute('href', url);
  link.setAttribute('download', filename || `Journal_Export_${new Date().toISOString().split('T')[0]}.json`);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};

// ============================================================================
// EMR EXPORT (HL7 FHIR Format)
// ============================================================================

/**
 * Export to HL7 FHIR format for EMR systems
 */
export const exportToFHIR = (entry: JournalEntry, patientId: string) => {
  const fhirObservation = {
    resourceType: 'Observation',
    id: entry.id,
    status: 'final',
    category: [{
      coding: [{
        system: 'http://terminology.hl7.org/CodeSystem/observation-category',
        code: 'social-history',
        display: 'Social History',
      }],
    }],
    code: {
      coding: [{
        system: 'http://loinc.org',
        code: '75325-1',
        display: 'Patient journal entry',
      }],
      text: entry.eventType,
    },
    subject: {
      reference: `Patient/${patientId}`,
    },
    effectiveDateTime: entry.entryDate,
    issued: new Date().toISOString(),
    valueString: entry.content,
    note: [{
      text: entry.title,
    }],
    component: [
      {
        code: {
          text: 'Mood',
        },
        valueString: entry.mood || 'Not recorded',
      },
      {
        code: {
          text: 'Event Type',
        },
        valueString: entry.eventType,
      },
    ],
  };

  const jsonContent = JSON.stringify(fhirObservation, null, 2);
  
  const blob = new Blob([jsonContent], { type: 'application/fhir+json' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  link.setAttribute('href', url);
  link.setAttribute('download', `FHIR_Observation_${entry.id}.json`);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};

// ============================================================================
// HELPER FUNCTIONS
// ============================================================================

function calculateStats(entries: JournalEntry[]) {
  const stats = {
    totalEntries: entries.length,
    criticalEvents: entries.filter(e => e.eventType === 'Seizure' || e.eventType === 'Fall' || e.eventType === 'Allergic Reaction').length,
    seizures: entries.filter(e => e.eventType === 'Seizure').length,
    falls: entries.filter(e => e.eventType === 'Fall').length,
    behavioralChanges: entries.filter(e => e.eventType === 'Behavioral Change').length,
    sharedEntries: entries.filter(e => e.sharedWithProvider).length,
    reviewedEntries: entries.filter(e => e.providerReviewedAt).length,
    moodCounts: [] as [string, number][],
  };

  // Count moods
  const moodMap: Record<string, number> = {};
  entries.forEach(entry => {
    if (entry.mood) {
      moodMap[entry.mood] = (moodMap[entry.mood] || 0) + 1;
    }
  });

  stats.moodCounts = Object.entries(moodMap).map(([mood, count]) => [
    mood.charAt(0).toUpperCase() + mood.slice(1),
    count,
  ]);

  return stats;
}

/**
 * Generate print-friendly version
 */
export const printJournalEntry = (entry: JournalEntry) => {
  const printWindow = window.open('', '', 'height=600,width=800');
  if (!printWindow) return;

  printWindow.document.write(`
    <html>
      <head>
        <title>Journal Entry - ${entry.title}</title>
        <style>
          body { font-family: Arial, sans-serif; padding: 20px; }
          h1 { color: #4caf50; }
          .field { margin: 10px 0; }
          .label { font-weight: bold; }
          .content { margin-top: 20px; padding: 15px; background: #f5f5f5; border-radius: 8px; }
        </style>
      </head>
      <body>
        <h1>Patient Journal Entry</h1>
        <div class="field"><span class="label">Date:</span> ${new Date(entry.entryDate).toLocaleString()}</div>
        <div class="field"><span class="label">Title:</span> ${entry.title}</div>
        <div class="field"><span class="label">Event Type:</span> ${entry.eventType}</div>
        <div class="field"><span class="label">Mood:</span> ${entry.mood || 'Not recorded'}</div>
        <div class="content">
          <div class="label">Notes:</div>
          <p>${entry.content}</p>
        </div>
      </body>
    </html>
  `);

  printWindow.document.close();
  printWindow.print();
};

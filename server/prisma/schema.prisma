// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  passwordHash  String
  name          String
  role          String   // PATIENT, CAREGIVER, PROVIDER, INSURER
  phoneNumber   String?
  dateOfBirth   DateTime?
  address       String?
  
  // Metadata
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastLogin     DateTime?
  isActive      Boolean  @default(true)
  
  // Relations
  patientProfile    PatientProfile?
  caregiverProfile  CaregiverProfile?
  providerProfile   ProviderProfile?
  insurerProfile    InsurerProfile?
  
  @@map("users")
}

model PatientProfile {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  medicalRecordNumber String? @unique
  bloodType         String?
  allergies         String?  // JSON string or comma-separated
  chronicConditions String?  // JSON string or comma-separated
  emergencyContact  String?
  
  caregiverId       String?
  primaryProviderId String?
  insurerId         String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("patient_profiles")
}

model CaregiverProfile {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  relationshipType  String?  // e.g., "Spouse", "Child", "Professional Caregiver"
  licenseNumber     String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("caregiver_profiles")
}

model ProviderProfile {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  specialty         String?
  licenseNumber     String   @unique
  npiNumber         String?  @unique // National Provider Identifier
  clinicName        String?
  clinicAddress     String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("provider_profiles")
}

model InsurerProfile {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  companyName       String
  policyNumber      String?  @unique
  department        String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("insurer_profiles")
}

model Appointment {
  id                String   @id @default(uuid())
  
  // Who is the appointment for
  patientId         String
  patientName       String   // Denormalized for easier queries
  
  // Who is providing the service
  providerId        String
  providerName      String   // Denormalized
  
  // Appointment details
  title             String
  description       String?
  specialty         String?  // e.g., "Cardiology", "Dermatology"
  appointmentType   String?  // e.g., "Consultation", "Follow-up", "Procedure"
  
  // Date and time
  startTime         DateTime
  endTime           DateTime
  duration          Int      // Duration in minutes
  
  // Location
  location          String?
  isVirtual         Boolean  @default(false)
  meetingLink       String?
  
  // Status
  status            String   @default("SCHEDULED") // SCHEDULED, CONFIRMED, CANCELLED, COMPLETED, NO_SHOW
  
  // Additional info
  notes             String?
  cancelReason      String?
  reminderSent      Boolean  @default(false)
  
  // Metadata
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdBy         String   // User ID who created the appointment
  
  @@map("appointments")
  @@index([patientId])
  @@index([providerId])
  @@index([startTime])
  @@index([status])
}

model Conversation {
  id                String   @id @default(uuid())
  
  // Participants (stored as JSON array of user IDs)
  participantIds    String   // JSON array: ["userId1", "userId2"]
  participantNames  String   // JSON array: ["Name1", "Name2"]
  
  // Conversation metadata
  subject           String?
  lastMessageAt     DateTime @default(now())
  lastMessageText   String?
  
  // Status
  isArchived        Boolean  @default(false)
  
  // Metadata
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  messages          Message[]
  
  @@map("conversations")
  @@index([lastMessageAt])
}

model Message {
  id                String   @id @default(uuid())
  
  // Conversation
  conversationId    String
  conversation      Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  // Sender
  senderId          String
  senderName        String
  senderRole        String   // PATIENT, CAREGIVER, PROVIDER, INSURER
  
  // Message content
  content           String
  messageType       String   @default("TEXT") // TEXT, IMAGE, FILE, SYSTEM
  attachmentUrl     String?
  
  // Status
  isRead            Boolean  @default(false)
  readAt            DateTime?
  
  // Metadata
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("messages")
  @@index([conversationId])
  @@index([senderId])
  @@index([createdAt])
}

model HealthMetric {
  id                String   @id @default(uuid())
  
  // Patient
  patientId         String
  
  // Metric details
  metricType        String   // BLOOD_PRESSURE, HEART_RATE, WEIGHT, GLUCOSE, TEMPERATURE, OXYGEN_SATURATION
  value             Float
  unit              String   // e.g., "mmHg", "bpm", "kg", "mg/dL", "Â°F", "%"
  
  // Additional data (JSON for complex metrics like BP)
  additionalData    String?  // JSON: {"systolic": 120, "diastolic": 80}
  
  // Context
  notes             String?
  recordedBy        String?  // User ID who recorded it
  source            String   @default("MANUAL") // MANUAL, DEVICE, IMPORTED
  
  // Metadata
  recordedAt        DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("health_metrics")
  @@index([patientId])
  @@index([metricType])
  @@index([recordedAt])
}

model HealthInsight {
  id                String   @id @default(uuid())
  
  // Patient
  patientId         String
  
  // Insight details
  insightType       String   // TREND, RISK, RECOMMENDATION, ACHIEVEMENT
  category          String   // CARDIOVASCULAR, DIABETES, WEIGHT, GENERAL
  title             String
  description       String
  severity          String   @default("INFO") // INFO, WARNING, ALERT, CRITICAL
  
  // AI-generated data
  confidence        Float    @default(0.8) // 0.0 to 1.0
  dataPoints        String?  // JSON array of related metric IDs
  
  // Status
  isRead            Boolean  @default(false)
  isDismissed       Boolean  @default(false)
  
  // Metadata
  generatedAt       DateTime @default(now())
  expiresAt         DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("health_insights")
  @@index([patientId])
  @@index([insightType])
  @@index([severity])
  @@index([generatedAt])
}

// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  passwordHash  String
  name          String
  role          String   // PATIENT, CAREGIVER, PROVIDER, INSURER
  phoneNumber   String?
  dateOfBirth   DateTime?
  address       String?
  
  // Metadata
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastLogin     DateTime?
  isActive      Boolean  @default(true)
  
  // Relations
  patientProfile    PatientProfile?
  caregiverProfile  CaregiverProfile?
  providerProfile   ProviderProfile?
  insurerProfile    InsurerProfile?
  
  @@map("users")
}

model PatientProfile {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  medicalRecordNumber String? @unique
  bloodType         String?
  allergies         String?  // JSON string or comma-separated
  chronicConditions String?  // JSON string or comma-separated
  emergencyContact  String?
  
  caregiverId       String?
  primaryProviderId String?
  insurerId         String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("patient_profiles")
}

model CaregiverProfile {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  relationshipType  String?  // e.g., "Spouse", "Child", "Professional Caregiver"
  licenseNumber     String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("caregiver_profiles")
}

model ProviderProfile {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  specialty         String?
  licenseNumber     String   @unique
  npiNumber         String?  @unique // National Provider Identifier
  clinicName        String?
  clinicAddress     String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("provider_profiles")
}

model InsurerProfile {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  companyName       String
  policyNumber      String?  @unique
  department        String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("insurer_profiles")
}

model Appointment {
  id                String   @id @default(uuid())
  
  // Who is the appointment for
  patientId         String
  patientName       String   // Denormalized for easier queries
  
  // Who is providing the service
  providerId        String
  providerName      String   // Denormalized
  
  // Appointment details
  title             String
  description       String?
  specialty         String?  // e.g., "Cardiology", "Dermatology"
  appointmentType   String?  // e.g., "Consultation", "Follow-up", "Procedure"
  
  // Date and time
  startTime         DateTime
  endTime           DateTime
  duration          Int      // Duration in minutes
  
  // Location
  location          String?
  isVirtual         Boolean  @default(false)
  meetingLink       String?
  
  // Status
  status            String   @default("SCHEDULED") // SCHEDULED, CONFIRMED, CANCELLED, COMPLETED, NO_SHOW
  
  // Additional info
  notes             String?
  cancelReason      String?
  reminderSent      Boolean  @default(false)
  
  // Metadata
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdBy         String   // User ID who created the appointment
  
  @@map("appointments")
  @@index([patientId])
  @@index([providerId])
  @@index([startTime])
  @@index([status])
}

model Conversation {
  id                String   @id @default(uuid())
  
  // Participants (stored as JSON array of user IDs)
  participantIds    String   // JSON array: ["userId1", "userId2"]
  participantNames  String   // JSON array: ["Name1", "Name2"]
  
  // Conversation metadata
  subject           String?
  lastMessageAt     DateTime @default(now())
  lastMessageText   String?
  
  // Status
  isArchived        Boolean  @default(false)
  
  // Metadata
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  messages          Message[]
  
  @@map("conversations")
  @@index([lastMessageAt])
}

model Message {
  id                String   @id @default(uuid())
  
  // Conversation
  conversationId    String
  conversation      Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  // Sender
  senderId          String
  senderName        String
  senderRole        String   // PATIENT, CAREGIVER, PROVIDER, INSURER
  
  // Message content
  content           String
  messageType       String   @default("TEXT") // TEXT, IMAGE, FILE, SYSTEM
  attachmentUrl     String?
  
  // Status
  isRead            Boolean  @default(false)
  readAt            DateTime?
  
  // Metadata
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("messages")
  @@index([conversationId])
  @@index([senderId])
  @@index([createdAt])
}

model HealthMetric {
  id                String   @id @default(uuid())
  
  // Patient
  patientId         String
  
  // Metric details
  metricType        String   // BLOOD_PRESSURE, HEART_RATE, WEIGHT, GLUCOSE, TEMPERATURE, OXYGEN_SATURATION
  value             Float
  unit              String   // e.g., "mmHg", "bpm", "kg", "mg/dL", "Â°F", "%"
  
  // Additional data (JSON for complex metrics like BP)
  additionalData    String?  // JSON: {"systolic": 120, "diastolic": 80}
  
  // Context
  notes             String?
  recordedBy        String?  // User ID who recorded it
  source            String   @default("MANUAL") // MANUAL, DEVICE, IMPORTED
  
  // Metadata
  recordedAt        DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("health_metrics")
  @@index([patientId])
  @@index([metricType])
  @@index([recordedAt])
}

model HealthInsight {
  id                String   @id @default(uuid())
  
  // Patient
  patientId         String
  
  // Insight details
  insightType       String   // TREND, RISK, RECOMMENDATION, ACHIEVEMENT
  category          String   // CARDIOVASCULAR, DIABETES, WEIGHT, GENERAL
  title             String
  description       String
  severity          String   @default("INFO") // INFO, WARNING, ALERT, CRITICAL
  
  // AI-generated data
  confidence        Float    @default(0.8) // 0.0 to 1.0
  dataPoints        String?  // JSON array of related metric IDs
  
  // Status
  isRead            Boolean  @default(false)
  isDismissed       Boolean  @default(false)
  
  // Metadata
  generatedAt       DateTime @default(now())
  expiresAt         DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("health_insights")
  @@index([patientId])
  @@index([insightType])
  @@index([severity])
  @@index([generatedAt])
}

model Claim {
  id                String   @id @default(uuid())
  
  // Patient and Provider
  patientId         String
  patientName       String
  providerId        String
  providerName      String
  
  // Claim details
  claimNumber       String   @unique
  claimType         String   // MEDICAL, PHARMACY, DENTAL, VISION
  serviceDate       DateTime
  submittedDate     DateTime @default(now())
  
  // Financial
  claimedAmount     Float
  approvedAmount    Float?
  deductible        Float    @default(0)
  copay             Float    @default(0)
  
  // Status
  status            String   @default("PENDING") // PENDING, APPROVED, DENIED, UNDER_REVIEW
  denialReason      String?
  
  // Diagnosis and procedure
  diagnosisCode     String?  // ICD-10
  procedureCode     String?  // CPT
  description       String
  
  // Risk flags
  isHighCost        Boolean  @default(false)
  isFraudSuspect    Boolean  @default(false)
  riskScore         Float    @default(0) // 0-100
  
  // Metadata
  processedDate     DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("claims")
  @@index([patientId])
  @@index([providerId])
  @@index([status])
  @@index([claimNumber])
  @@index([serviceDate])
}

model RiskAssessment {
  id                String   @id @default(uuid())
  
  // Patient
  patientId         String
  patientName       String
  
  // Risk scoring
  overallRiskScore  Float    // 0-100
  riskLevel         String   // LOW, MEDIUM, HIGH, CRITICAL
  
  // Risk factors
  chronicConditions String?  // JSON array
  recentHospitalizations Int @default(0)
  medicationCount   Int      @default(0)
  missedAppointments Int     @default(0)
  
  // Predictions
  hospitalizationRisk Float  @default(0) // 0-100
  costPrediction    Float    @default(0) // Predicted annual cost
  
  // Recommendations
  interventions     String?  // JSON array of recommended actions
  
  // Metadata
  assessmentDate    DateTime @default(now())
  nextAssessment    DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("risk_assessments")
  @@index([patientId])
  @@index([riskLevel])
  @@index([assessmentDate])
}

model Recipe {
  id                String   @id @default(uuid())
  
  // Basic info
  name              String
  description       String
  imageUrl          String?
  prepTime          Int      // minutes
  cookTime          Int      // minutes
  servings          Int
  difficulty        String   // EASY, MEDIUM, HARD
  
  // Categorization
  category          String   // BREAKFAST, LUNCH, DINNER, SNACK, DESSERT
  cuisine           String?  // AMERICAN, ITALIAN, ASIAN, etc.
  dietaryTags       String   // JSON array: VEGETARIAN, VEGAN, GLUTEN_FREE, etc.
  
  // Nutrition (per serving)
  calories          Int
  protein           Float    // grams
  carbs             Float    // grams
  fat               Float    // grams
  fiber             Float    // grams
  sugar             Float    // grams
  sodium            Float    // mg
  
  // Health conditions
  goodFor           String?  // JSON array: DIABETES, HEART_DISEASE, HYPERTENSION
  restrictions      String?  // JSON array: allergies, intolerances
  
  // Content
  ingredients       String   // JSON array of {name, amount, unit}
  instructions      String   // JSON array of steps
  tips              String?
  
  // Metadata
  createdBy         String?
  isPublic          Boolean  @default(true)
  rating            Float    @default(0)
  reviewCount       Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("recipes")
  @@index([category])
  @@index([difficulty])
  @@index([calories])
}

model MealPlan {
  id                String   @id @default(uuid())
  
  // Patient
  patientId         String
  patientName       String
  
  // Plan details
  planName          String
  startDate         DateTime
  endDate           DateTime
  isActive          Boolean  @default(true)
  
  // Goals
  targetCalories    Int?
  targetProtein     Float?
  targetCarbs       Float?
  targetFat         Float?
  
  // Dietary preferences
  dietType          String?  // BALANCED, LOW_CARB, LOW_FAT, MEDITERRANEAN, etc.
  culturalCuisine   String?  // AMERICAN, ARABIC, INDIAN, BRAZILIAN, ITALIAN, TURKISH, MEXICAN, ASIAN
  restrictions      String?  // JSON array
  allergies         String?  // JSON array
  
  // Health integration
  healthConditions  String?  // JSON array
  medicationInteractions String? // JSON array
  
  // Metadata
  createdBy         String?  // Provider or caregiver ID
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("meal_plans")
  @@index([patientId])
  @@index([isActive])
  @@index([startDate])
}

model PlannedMeal {
  id                String   @id @default(uuid())
  
  // Meal plan
  mealPlanId        String
  
  // Meal details
  date              DateTime
  mealType          String   // BREAKFAST, LUNCH, DINNER, SNACK, DESSERT
  recipeId          String?
  recipeName        String
  
  // Nutrition
  calories          Int
  protein           Float
  carbs             Float
  fat               Float
  
  // Status
  isCompleted       Boolean  @default(false)
  completedAt       DateTime?
  notes             String?
  
  // Photo documentation
  photoUrl          String?
  photoTakenBy      String?  // Caregiver ID
  photoTakenAt      DateTime?
  
  // Patient preference tracking
  rating            Int?     // 1-5 stars
  ratedBy           String?  // Caregiver ID
  ratedAt           DateTime?
  feedback          String?  // What patient said about the meal
  
  // Metadata
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("planned_meals")
  @@index([mealPlanId])
  @@index([date])
  @@index([mealType])
}

model NutritionLog {
  id                String   @id @default(uuid())
  
  // Patient
  patientId         String
  
  // Log details
  date              DateTime
  mealType          String   // BREAKFAST, LUNCH, DINNER, SNACK
  foodName          String
  
  // Nutrition
  calories          Int
  protein           Float
  carbs             Float
  fat               Float
  fiber             Float?
  sugar             Float?
  sodium            Float?
  
  // Portion
  servingSize       String
  servings          Float    @default(1)
  
  // Source
  recipeId          String?
  plannedMealId     String?
  
  // Metadata
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("nutrition_logs")
  @@index([patientId])
  @@index([date])
  @@index([mealType])
}

// ==================== PHARMACY & MEDICATION MANAGEMENT ====================

model Medication {
  id                String   @id @default(uuid())
  
  // Basic Info
  name              String
  genericName       String?
  brandName         String?
  ndc               String?  @unique // National Drug Code
  
  // Details
  dosage            String
  form              String   // tablet, capsule, liquid, injection, etc.
  manufacturer      String?
  category          String?  // antibiotic, statin, antihypertensive, etc.
  
  // Description
  description       String?
  sideEffects       String?  // JSON array
  warnings          String?  // JSON array
  instructions      String?
  
  // Prescription
  requiresPrescription Boolean @default(true)
  controlledSubstance  String? // Schedule I-V
  
  // Pricing
  averagePrice      Float?
  insuranceCovered  Boolean  @default(true)
  
  // Metadata
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  isActive          Boolean  @default(true)
  
  // Relations
  prescriptions     Prescription[]
  alternatives      MedicationAlternative[] @relation("MainMedication")
  alternativeOf     MedicationAlternative[] @relation("AlternativeMedication")
  interactions1     DrugInteraction[] @relation("Medication1")
  interactions2     DrugInteraction[] @relation("Medication2")
  stocks            MedicationStock[]
  histories         MedicationHistory[]
  
  @@map("medications")
  @@index([name])
  @@index([genericName])
  @@index([category])
}

model MedicationAlternative {
  id                String   @id @default(uuid())
  
  medicationId      String
  medication        Medication @relation("MainMedication", fields: [medicationId], references: [id], onDelete: Cascade)
  
  alternativeId     String
  alternative       Medication @relation("AlternativeMedication", fields: [alternativeId], references: [id], onDelete: Cascade)
  
  type              String   // generic, brand, therapeutic
  costDifference    Float?   // Positive = more expensive, Negative = cheaper
  effectiveness     String?  // equivalent, similar, different
  approvedBy        String?  // FDA, provider, clinical study
  notes             String?
  
  createdAt         DateTime @default(now())
  
  @@map("medication_alternatives")
  @@unique([medicationId, alternativeId])
  @@index([medicationId])
}

model Prescription {
  id                String   @id @default(uuid())
  
  // Who
  patientId         String
  providerId        String
  medicationId      String
  medication        Medication @relation(fields: [medicationId], references: [id])
  
  // What
  dosage            String
  frequency         String   // daily, twice daily, every 8 hours, etc.
  duration          Int?     // days
  quantity          Int      // number of pills/doses
  
  // When
  startDate         DateTime
  endDate           DateTime?
  
  // Refills
  refillsAllowed    Int      @default(0)
  refillsRemaining  Int      @default(0)
  
  // Status
  status            String   // active, completed, cancelled, expired
  
  // Instructions
  instructions      String?
  notes             String?
  
  // Pharmacy
  pharmacyName      String?
  pharmacyPhone     String?
  pharmacyAddress   String?
  
  // Metadata
  prescribedAt      DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  stocks            MedicationStock[]
  refillRequests    RefillRequest[]
  
  @@map("prescriptions")
  @@index([patientId])
  @@index([providerId])
  @@index([medicationId])
  @@index([status])
}

model MedicationStock {
  id                String   @id @default(uuid())
  
  patientId         String
  medicationId      String
  medication        Medication @relation(fields: [medicationId], references: [id])
  prescriptionId    String?
  prescription      Prescription? @relation(fields: [prescriptionId], references: [id])
  
  // Stock
  currentStock      Int      @default(0)
  lowStockThreshold Int      @default(5)
  
  // Refill
  lastRefillDate    DateTime?
  nextRefillDue     DateTime?
  autoRefill        Boolean  @default(false)
  
  // Pharmacy
  pharmacyName      String?
  pharmacyPhone     String?
  pharmacyAddress   String?
  
  // Metadata
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  histories         MedicationHistory[]
  
  @@map("medication_stocks")
  @@unique([patientId, medicationId])
  @@index([patientId])
  @@index([currentStock])
}

model DrugInteraction {
  id                String   @id @default(uuid())
  
  medication1Id     String
  medication1       Medication @relation("Medication1", fields: [medication1Id], references: [id], onDelete: Cascade)
  
  medication2Id     String
  medication2       Medication @relation("Medication2", fields: [medication2Id], references: [id], onDelete: Cascade)
  
  severity          String   // minor, moderate, severe, critical
  description       String
  recommendation    String?
  source            String?  // FDA, clinical study, etc.
  
  createdAt         DateTime @default(now())
  
  @@map("drug_interactions")
  @@unique([medication1Id, medication2Id])
  @@index([medication1Id])
  @@index([medication2Id])
  @@index([severity])
}

model MedicationHistory {
  id                String   @id @default(uuid())
  
  patientId         String
  medicationId      String
  medication        Medication @relation(fields: [medicationId], references: [id])
  stockId           String?
  stock             MedicationStock? @relation(fields: [stockId], references: [id])
  
  action            String   // taken, missed, refilled, discontinued, added
  timestamp         DateTime @default(now())
  
  // Details
  dosageTaken       String?
  notes             String?
  recordedBy        String?  // patient, caregiver, system
  
  @@map("medication_history")
  @@index([patientId])
  @@index([medicationId])
  @@index([timestamp])
  @@index([action])
}

model RefillRequest {
  id                String   @id @default(uuid())
  
  prescriptionId    String
  prescription      Prescription @relation(fields: [prescriptionId], references: [id])
  
  requestedBy       String   // patient or caregiver ID
  requestedAt       DateTime @default(now())
  
  status            String   // pending, approved, denied, filled
  
  pharmacyName      String?
  pharmacyPhone     String?
  
  approvedBy        String?  // provider ID
  approvedAt        DateTime?
  
  filledAt          DateTime?
  
  notes             String?
  
  @@map("refill_requests")
  @@index([prescriptionId])
  @@index([status])
}
